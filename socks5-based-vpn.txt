#1.install shadowsocks:
snap install ss-qt

#2. in Baacloud, get the ss (socket server) ip (without http or https), ssr (socket server rendering) password and ssr port. In my case, it was 

【ssr连接端口：18720】

【ssr连接密码：mufzSRK3rGMy】-【ssr协议:origin】

【ssr加密方式：aes-256-cfb】-【ssr混淆:plain】

台湾3|1倍流量

1625781.tw-3.baacloud1.com 正常

#3. start the local ss server, using shadowsocks
run shadowsocks from applications directly, it is GUI-based.

#4 in shadowsocks, add connections, and type in the ip, port, password, encryption method, etc.. Save.

Note: 
local address =  127.0.0.1
local port = 1080
local server type = SOCKS5
encryption method =  AES-256-CFB
one-time authentication = false

#5 then test latency of the external ss server, if exists, it is successful. You can then connect to it after configuring the routing rules.

#6 pip3 install genpac

#7 create genpac config:

cd ~/.config

mkdir GenPAC

sudo genpac --pac-proxy="SOCKS5 127.0.0.1:1080" -o autoproxy.pac --gfwlist-url="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt"

Note: sometimes the last step fails at requesting for gfwlist.txt. It is a rule containing list of urls to request thru ss proxy. Try a few times. If fails, try turning on the local ss server using shadowsocks, connect to the external ss server, and try again. This may make the gfwlist request to actually go through the ss server.

#8 sudo apt install privoxy

#9 sudo nano /etc/privoxy/config

uncomment (or add in, or edit, if necessary) such that:

listen-address 127.0.0.1:8118 #this is the local http(s) proxy address

forward-socks5t / 127.0.0.1:1080 #this forwards the local http(s) proxy request to socks5t address

toggle = 0 #privoxy requests block, toggle OFF, to turn off adblocks (and annoying accidental blocks!). I'm ok with ads.

#then presumably, the request sent to socks5t address is then sent to the external ss server.

#the flow goes like this:
http(s) request -> local http proxy server 127.0.0.1:8118 -> local socks5 server 127.0.0.1:1080 ----|----> external socks5 server 1625781.tw-2.baacloud1.com:18720 with password -> external http proxy server -> http request -> target server -> http response, ....etc.

#10 restart privoxy

systemctl restart privoxy

#11 configure ~/.bashrc

export http_proxy="127.0.0.1:8118"
export https_proxy="127.0.0.1:8118"
export ftp_proxy="127.0.0.1:8118"

exit and 

source ~/.bashrc

Test: in cmd, type in

curl www.google.com

should return html.

#12 Now go to ubuntu "Settings" > Network > Network Proxy, click on settings Gear icon, select Manual, and type in:

HTTP Proxy: 127.0.0.1 (8118 -+)
HTTPS Proxy: 127.0.0.1:8118
Socks Host 127.0.0.1:1080
Ignore Hosts: localhost, 127.0.0.0/8, ::1

#12 How to use proxy:

1. turn on shadowsocks, connect to proxy ss server. You can always keep this on.
2. in Network Proxy, select Manual
3. the browser can now use proxy automatically. But by default all browser requests use the proxy. Sometimes this can be inconvenient when you want to browse local chinese websites using chinese IP instead (such as cn.ad101.blog). Select 'Disabled' in Network Proxy settings to browse normally. Alternatively, you can add cn.ad101.blog to the list of 'No Proxy for' in the browser proxy settings.

4. In terminal, ping www.google.com does not work because it doesn't use the http proxy server:8118. 

5. In python, install

pip3 install pysocks
pip3 install -U requests[socks]

this is to enable socks support in requests.

To use the proxy:

import requests
proxies = {'http': "127.0.0.1:8118",
           'https': "127.0.0.1:8118"}
r = requests.get('https://www.google.com/')

sometimes, you can use
#'https': "socks5://127.0.0.1:1080" in the proxies dict,
but for some unknown reason, it didn't work for me.

6. I notice that by default the system does not use the http proxy even though I've set the Network Proxy to Manual. But the browser uses the Network Proxy correctly.






